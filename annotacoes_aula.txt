<------------ AULA 90 ------------>

Fizemos o tratamento de excecoes no atualizar, e testamos que podemos atualizar os dados do autor para os mesmos se
for da vontade do usuario

Adicionamos mais uma exception, de nome OperacaoNaoPermitida para lancar uma excecao quando tentar deletar um autor
que possua um livro

Criamos um Query Method para verificar se o autor possui um livro no LivroRepository o existsByAutor que vai retornar
true se existir um livro associado ao autor

No autor service criamos o metodo possuiLivro, no qual retorna um boolean e esse boolean vai ser usado para verificar
antes de deletar se deve ou nao lancar a excecao

Na hora de injetar o LivroRepository para usar o Query Method criado, usamos o final no LivroRepository para
dizer que TEM inicializar ja no construtor as

Apos isso, add um livro associado a um autor atraves do LivroRepository, que tambem tive um problema pois setar o autor
no livro estava comentado e nao estava em uma transacao explicita, entao commitava imediatamente e lancava excecao

@Transactional apenas mascarava o problema, poiso commit iria para uma pilha e nem chegava a ser chamado pois no fim do
teste ele dava um rollback no que foi feito

(Resolvemos o problema de add um livro descomentando livro.setAutor(autor)) --> assim nao gerando um erro e nem
necessitando de @Transactional

Entao tratamos a excecao em deletar no Controller com try/catch.

Apos isso, removemos o cascade.ALL do Autor, pois ele excluiria o AUTOR e os LIVROS, quebrando nossa logica

No proximo Modulo vamos utilizar o SpringBoot Starter Validator para fazer o erro de Validacao