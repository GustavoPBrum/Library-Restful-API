<------------ AULA 89 ------------>

Criamos a validacao de registro duplicado para autor, criando o pacote Exception com a RegistroDuplicadoException
personalizada que extends RuntimeException

Para abstrair a logica de validacao de Service (e Controller tbm), criamos um pacote responsavel por fazer a validacao
chamado Validator (com no momento apenas a classe AutorValidator), cujo tem injecao do Repository para pesquisar no BD

Nesse AutorValidator criamos um metodo boolean que procura a existencia de um possivel autor ja cadastrado e que usamos
para poder lancar a RegistroDuplicadoException informando caso ja exista.

Para fazer a verificacao neste metodo, no AutorRepository criamos um metodo Optional<Autor> com os parametros de
nome, dataNascimento e nacionalidade (Query Method)

Query Method criado, o usamos no metodo boolean, se o autor nao tiver Id vamos estar cadastrando ele, e se o metodo
autoEncontrado der True no obj Autor (quer dizer que eh registro duplicado) e vai lancar a RegistroDuplicadoException

Tive que me atentar pois se caso fosse uma atualizacao, teria de tomar cuidado de nao ser o proprio obj ex: atualizamos
na API mas no BD eh os dados antigos

Entao para funcionar a validacao, o Id do autor TEM QUE SER diferente (!condition) do Id do autorEncontrado e alem de
claro, autorEncotrado tem que ser diferente de nulo para lancar a RegistroDuplicadoException

Fiz a tratativa de erro no Controller em salvar com Try/catch com RegistroDuplicadoException e retornando a
ResponseEntity com o metodo static status com Conflict e usando nosso erroDTO com numero 409

Mudei o tipo de ResponseEntity para Object, pois pode retornar tanto exception quando created